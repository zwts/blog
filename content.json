[{"title":"Gaia Makefile","date":"2017-12-04T11:54:30.000Z","path":"2017/12/04/Gaia-Makefile/","text":"Makefilehttps://github.com/zwts/gaia/blob/v2.2/Makefile Makefile 基础语法入门：http://www.ruanyifeng.com/blog/2015/02/make.html 注释内容 Global configrations GAIA_DOMAIN SYSTEM ADB DEBUG REPORTER MOZPREFOUT MARIONETTE_RUNNER_HOST COVERAGE GAIA_APP_CONFIG Lint code make hint make gjslint make lint B2G Desktop USE_LOCAL_XULRUNNER_SDK XULRUNNER_DIRECTORY 正文 MAKEFLAGS=-r -r禁止使用build-in规则 https://www.gnu.org/software/make/manual/make.html#Implicit-Rules REBUILD GAIA_DISTRIBUTION_DIR LOCALE_BASEDIR LOCALES_FILE 上述参数定义/改变的情况下，需要rebuild(具体rebuild操作gaia/build/rebuild.js) WGET_OPTS?=-c -nv wget参数 DEVICE_DEBUG?=0 是否默认打开设备可调试 NO_LOCK_SCREEN?=0 是否默认打开锁屏 SCREEN_TIMEOUT?=-1 是否打开屏幕超时 PRODUCTION?=0 区别编译user/userdebug/eng版本 GAIA_OPTIMIZE?=0webpp-optimize will do below things： Inline embeded html from into html and commented(&lt;!–CONTENT–&gt;). Concat l10n resource to json files and put them as link and attach to html. Aggregate and uglify all JS files used in html to one JS file. Optimize inline JS/CSS content. GAIA_DEV_PIXELS_PER_PX?=1 P?=1 Parallel build for multicores CPU GAIA_DPPX Alias of GAIA_DEV_PIXELS_PER_PX DOGFOOD?=0 dogfood测试，零时版本？会影响： PRODUCTION GAIA_APP_TARGET=dogfood BUILD_CONFIG NODE_MODULES_SRC?=modules.tar NODE_MODULES_CACHEDIR=modules_tar_cachedir GAIA_DEVICE_TYPE?=phone device type customization phone - default tablet tv TEST_AGENT_PORT?=8789 use for: .PHONY: test-agent-server(.PHONY 声明伪目标，每次都执行，而不去监测是否存在目标文件) .PHONY: test-agent-test GAIA_APP_TARGET?=engineeringuse for build app list: 路径为gaia/build/config/phone/app-engineer.list GAIA_APP_CONFIG=$(GAIA_DIR)$(SEP)build$(SEP)config$(SEP)$(GAIA_DEVICE_TYPE)$(SEP)apps-$(GAIA_APP_TARGET).list (Makefile line:350) DESKTOP?=$(DEBUG) Enable compatibility to run in Firefox Desktop NOFTU?=0 Disable first time experience screen 去掉开机设置向导相关内容 NOFTUPING?=0 Disable first time ping REMOTE_DEBUGGER?=0 Automatically enable remote debugger BUILD_DEBUG?=0 Debug mode for build process","tags":[]},{"title":"FFOS Part 3","date":"2017-12-01T10:02:04.000Z","path":"2017/12/01/FFOS-Part-3/","text":"GeckoXPCOM Cross Platform Component Object Model; A framework which allows developers to break up monolithic software projects into smaller modularized pieces Provide: component management object message passing memory management nsISupports(?) CID: 128-bit number that uniquely identifies a class or component.{ 0x777f7150, 0x4a2b, 0x4301, 0xad, 0x10, 0x5e, 0xab, 0x25, 0xb3, 0x22, 0xaa} IID: 128-bit number that uniquely identifies an interface Contract ID: human readable string used to access a component.&quot;@mozilla.org/network/ldap-operation;1&quot; Expections(?): All interface methods should return an nsresult error value Create XPCOM Component https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components XPConnect The bridge between XPCOM and JS(?) XPIDL An Interface Description Language used to specify XPCOM interface classes Some examples are in the gecko/xpcom/base and geckoxpcom/ds directories xpidl A tool For generating XPCOM interface information c++ headers type library files(.xpt): type library is the binary representation of interfaces.类型lib库(.xpt文件)，是用接口类文件生成的二进制的文件。 xptcall A small low level XPCOM method call library. The code is at: gecko/xpcom/reflect/xptcall xptcall exists for two reasons: To support invoking arbitrary methods on XPCOM interfaces. To support dynamically impersonating any XPCOM interface. Non-blocking IO(?) There is an IO thread in gecko. You can check RilClient in gecko/ipc/ril/Ril.cpp Code Directory Structure https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code/Directory_structure","tags":[]},{"title":"FFOS Part 2","date":"2017-11-30T08:51:27.000Z","path":"2017/11/30/FFOS-Part-2/","text":"GaiaXUL XML User Interface Language, a cross-platform language for description applications’ user interface. https://developer.mozilla.org/en-US/docs/XUL_Tutorial XULRunner XULRunner deploys XUL applications. https://developer.mozilla.org/en-US/docs/XULRunner shell.xul An entry point of Gaia, brings system APP up. gecko/b2g/chrome/content/shell.xul System app System app is the parent frame that create and destroy iframes to launch or stop other web apps. API: mozSettings get set observer How app to launch Get app reference from mozApps API, and call app.launch() Gecko receives request, then fire mozChromeEvent to System with launching APP detail System handle event, then insert iframe into it’s DOM App load index.html in iframe Write test case in Gaia https://github.com/mozilla-b2g/gaia/#tests Unit Tests, https://developer.mozilla.org/en/Mozilla/Boot_to_Gecko/Gaia_Unit_Tests Integration Test, https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Automated_testing/Gaia_integration_tests Provide APIs: suite(), test(), setup(), teardown()","tags":[]},{"title":"FFOS Part 1","date":"2017-11-29T09:36:21.000Z","path":"2017/11/29/FFOS-Part-1/","text":"ArchitectureGaia Applications and UI Third-party application can be installed Gecko JS Runtime (?) APIs Consists: network stack, graph stack, layout engine, virtual machine(for JS), porting layers Gonk Linux Kernel Device Drivers Hardware Abstraction Layer Start up Primary bootloader (usually show the first flash screen) Linux Kernel and Modem The end of bootstrapping process modem image loaded. The end of kernel startup, userspace “init” process launched A ramdisk mounted","tags":[]},{"title":"Ninja Javascript Part 6","date":"2017-11-27T12:06:16.000Z","path":"2017/11/27/Ninja-Javascript-Part-6/","text":"DOM特性和DOM属性 访问特性值：getAttribute／setAttribute 或者使用DOM对象上与之对应的属性。 12e.getAttribute('id')e.id id 的属性和特性以某种方式联系在一起，修改属性值也会改变特性值，但它们并没有共享一个相同的值。 一些特性名和属性名不同的情况:class/className, tabindex/tabIndex 等等。 事件在冒泡阶段，事件将从事件源传播到DOM的根节点；而在捕获阶段，事件则是从DOM根节点遍历传播到事件源上。","tags":[]},{"title":"Ninja Javascript Part 5","date":"2017-11-21T12:02:00.000Z","path":"2017/11/21/Ninja-Javascript-Part-5/","text":"线程在Web worker(?web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能)可用之前，++浏览器的所有Javascript代码都是在单线程中执行的++。异步事件的处理程序，如用户界面事件和定时器，在线程中没有代码执行的时候才执行，处理程序在执行时必须排队，并且一个处理程序不能中断另一个。 Javascript 是单线程的 Javascript 运行在浏览器中，是单线程的，每个windows一个线程。 浏览器是事件驱动，很多行为异步的，会创建事件并放入执行队列中。 Javascript 引擎单线程处理它的任务队列，也就是普通函数和回调函数组成的队列。 异步事件发生时，会把异步执行的callback放入队列，并等待当前代码执行完成。 浏览器不是单线程的 javascript 引擎线程 界面渲染线程 浏览器事件触发线程 http请求线程(Ajax) Ajax 异步 Ajax请求确实是异步的，这请求是由浏览器新开一个线程请求，事件回调的时候是放入Event loop单线程事件队列等候处理。 利用定时器分解长时间任务setTimeout(fun, 0) 123456789101112131415161718192021222324var count = 2000;var divide = 4;var chunkSize = count/divide;var iteration = 0;;var table = document.createElement('tbody');setTimeout(function generateRows() &#123; var base = (chunkSize) * iteration; for (let i = 0; i &lt; chunkSize; i++) &#123; let tr = document.createElement('tr'); for (let t = 0; t &lt; 6; t++) &#123; let td = document.createElement('td'); td.appendChild(document.createTextNode((i + base) + \",\" + t + ',' + iteration)); tr.appendChild(td); &#125; table.appendChild(tr); &#125; iteration++; if (iteration &lt; divide) &#123; setTimeout(generateRows, 0); &#125;&#125;, 0);","tags":[]},{"title":"Ninja Javascript Part 4","date":"2017-11-15T11:59:49.000Z","path":"2017/11/15/Ninja-Javascript-Part-4/","text":"正则 正则字面量正则字面量用正斜杠界定: 12var pattern = /test/;var pattern = /test/ig; 构造RegExp实例 12var pattern = new RegExp(\"test\");var pattern = new RegExp(\"test\", \"ig\"); 如果正则是已知的，优先选择字面量语法，而构造器的方式多用在运行时。 3个标志 i: 让正则表达式不区分大小写 g: 匹配模式中的所有实例 m: 允许匹配多行 匹配一类 [abc]: a或b或c [^abc]: abc以外的任意字符 [a-m]: a到m之间的所有字符 重复出现 ?: 出现1次或根本不出现 +: 字符出现1次或者多次 *: 字符出现0次或者多次 a{4}: a连续出现4次 a{4, 10}: a连续出现4次到10次之间的随意值 a{4,}: a连续出现4次以上的次数 分组/(ab)+/ 匹配1个或者多个连续出现的字符串ab。 反向引用在正则中所定义的捕获的反向引用。/^([dtn])a\\1/，可以是任意1个以d，t，n开头的，并且后面跟着1个a字符，并且后面跟着的是和第一个捕获相同的字符的字符串。dad 捕获和表达式分组都使用小括号表示。 被动子表达式，阻止不必要的捕获: /((?:nijia-)+)sword/ ,防止任何意外的捕获，所以在确定表达式是只用于分组时，需要使用 被动子表达式”?:”。 常用方案 /[\\S\\s]/ 匹配所有字符包括换行符。 /^\\s+|\\s+$/g 匹配所有开头或者结尾的空格。 /[\\w\\u0080-\\uFFFF_-]+/ 匹配包括Unicode在内的所有字符","tags":[]},{"title":"Ninja Javascript Part 3","date":"2017-11-14T11:16:39.000Z","path":"2017/11/14/Ninja-Javascript-Part-3/","text":"实例属性的优先级 通过原型给对象实例添加的属性 在构造器函数内给对象的实例添加的属性 在构造器内绑定的操作的优先级永远都高于在原型上绑定的操作优先级，因为构造器的this上下文指向的是实例自身。 查询属性引用时，首先查询对象自身，如果不存在，再去原型上查找，如果还是不存在，那么返回undefine。 原型链例如: 忍者是一个人，人又是一个哺乳动物，哺乳动物又是动物的一种…直到最终的是一个Object。创建这样一个原型链的最好的方式是，使用一个对象的实例作为另一个对象的原型。 用原型实现继承(即原型链)1234567function Person() &#123;&#125;Person.prototype.dance = function() &#123;&#125;function Ninja() &#123;&#125;Ninja.prototype = new Person();var ninja = new Ninja(); 注意，不要把原型对象赋值给原型，例如：Ninja.prototype = Person.prototype;，这样任何Ninja原型上的修改都会影响到person。","tags":[]},{"title":"Ninja Javascript Part 2","date":"2017-11-10T11:11:14.000Z","path":"2017/11/10/Ninja-Javascript-Part-2/","text":"闭包闭包是一个函数在创建时允许该自身函数访问并操作该自身函数之外的变量时所创建的作用域。 闭包可以让函数访问所有的变量和函数，只要这些变量和函数存在与该函数声明时的作用域内就行。 闭包的用法 封装私有变量 12345678910111213141516function Ninja() &#123; var feints = 0; this.getFeints = function() &#123; return feints; &#125;; this.feints = function() &#123; feinits++; &#125;;&#125;var ninja = new Ninja();ninja.feints();ninja.getFeints();//1ninja.feints;//undefine 通过闭包实现缓存记忆12345678910111213141516171819202122232425262728// 查询缓存Function.prototype.memoized = function(key) &#123; this._values = this._values || &#123;&#125;; return this._values[key] !== undefined ? this._values[key] : this._values[key] = this.apply(this, arguments);&#125;;// 封装函数，并且通过闭包把上下文保留下来Function.prototype.memoize = function() &#123; var fn = this; return function() &#123; return fn.memoized.apply(fn, arguments); &#125;;&#125;;var isPrime = (function(num) &#123; var prime = num !== 1; for (var i = 2; i &lt; num; i++) &#123; if (num % i === 0) &#123; prime = false; break; &#125; &#125; return prime;&#125;).memoize();assert(isPrime(17), \"17 is prime\"); 即时函数代码模式:1(function()&#123;&#125;)(); 第一组圆括号作用是用于划定表达式的范围 第二组圆括号则是一个操作符 第一组圆括号内直接是使用的是匿名函数 这段代码执行的操作: 创建一个函数的实例 执行该函数 销毁该函数，因为语句结束后没有任何引用了 类库包装不希望一些不必要的变量去污染全局命名空间，尤其时那些零时变量，利用闭包和即时函数封装类库，使它尽可能的私有，并且选择性的暴露一些变量到全局空间。 123456(function()&#123; var jQuery = window.jQuery = function() &#123; // initialize &#125;; // ...&#125;)(); 首先jQuery构造器(匿名函数)赋值给了window.jQuery,使其作为全局变量，然后将其赋值给了一个局部变量jQuery，强制让它保持在即时函数的作用域内。在即时函数的创建的世界中，名称jQuery的意义就是我们所期望的。 另一种实现方式:12345678var jQuery = (function()&#123; function jQuery() &#123; // initialize &#125; // ... return jQuery;&#125;)(); 首先在匿名函数的作用域中定义了jQuery函数，它可以自由存在于匿名函数的作用域中，然后将其返回并且赋值给一个名为jQuery全局变量，通常只输出一个变量时优先使用这种方式。 偏应用函数？重载函数？Todo","tags":[]},{"title":"Ninja JavaScript Part 1","date":"2017-11-09T06:48:30.000Z","path":"2017/11/09/Ninja-JavaScript-Part-1/","text":"函数参数以及形参 如果实际传递参数大于形参数量，超出的参数不会给予形参名称，但是依然能够通过其它方式获取到 如果形参数量大于实际传递参数数量，那么没有对应实际参数的形参会赋值为undefine 所有的函数调用都会默认传递2个隐式参数：arguments、this。 arguments拥有length属性的类数组（实际上不是）可以通过arguments[2]取到第3个参数; this参数引用了，与该函数调用时进行隐式关联的一个对象，被称为函数上下文。 函数作为构造器调用 调用方式：new function(); 调用时内部行为： 创建一个空对象 传递给构造器的对象是this参数，从而成为构造器的函数上下文 如果没有显式的返回值，那么新创建的对象则作为构造器的返回值返回 函数的apply和call方法JavaScript 任何一个函数都有apply() 和call() 方法，二者都可以显式的指定任何一个对象作为其函数的上下文。 func.apply(obj, [1,2,3]); func.call(obj, 1, 2, 3); 也可以在callback中指定函数上下文: callback.call(obj, n) 自记忆函数memorization, 能够记住先前的计算结果，以显著的提高性能。 记忆之前计算出的值 缓存记忆DOM元素 1234567function getElements(name) &#123; if (!getElements.cache) &#123; getElements.cache = &#123;&#125;; &#125; return getElements.cache[name] = getElements.cache[name] || document.getElementsByTagName(name);&#125; 控制传递函数上下文函数调用时，通过控制传递函数上下文，在当前对象上执行当前对象没有的方法。例如利用Array或Math上已有的方法，在自定义的数据上进行操作。 123function multiMax(multi) &#123; return multi * Math.max.apply(Math, Array.prototype.slice.call(arguments, 1));&#125; 欺骗Array.prototype.slice方法，将其在arguments列表上使用，arguments参数列表并不是一个真正的数组。","tags":[]},{"title":"No child processes compile error","date":"2017-05-15T08:29:46.000Z","path":"2017/05/15/tip1/","text":"no child processes… 现象描述：-j1 单线程编译能够通过，多线程-j8 或其它概率性不能通过，出现上面的报错。 解决方法：jdk版本不对，Ubuntu16.04应该用openjdk8","tags":[]},{"title":"编译系统找不到某个lib.so库时，便捷寻找方法","date":"2017-05-15T06:01:28.000Z","path":"2017/05/15/find_missing_libs_cause_compile_error/","text":"Install apt-file: sudo apt-get install apt-file apt-file update apt-file search libXext.so.6 libxext6: /usr/lib/x86_64-linux-gnu/libXext.so.6libxext6: /usr/lib/x86_64-linux-gnu/libXext.so.6.4.0libxext6-dbg: /usr/lib/debug/usr/lib/x86_64-linux-gnu/libXext.so.6.4.0 So: sudo apt-get install libxext6","tags":[]},{"title":"Android studio不兼容本地的SDK工具(error by mksdcard)","date":"2017-05-15T06:00:30.000Z","path":"2017/05/15/Unable-to-run-mksdcard-SDK-tool/","text":"Download the source from here: https://github.com/miracle2k/android-platform_sdk/blob/master/emulator/mksdcard/mksdcard.cThen simply compile with “gcc mksdcard.c -o mksdcard”Backup mksdcard in the SDK tools subfolder and replace with the newly compiled oneThen Android Studio will now be happy with your SDK","tags":[]},{"title":"Ubuntu上使用virtualbox安装windowsXP虚拟机","date":"2017-05-15T05:59:29.000Z","path":"2017/05/15/xp-virtualbox/","text":"安装 virtualbox下载正确的版本了解自己的Ubuntu lsb_release -a uname -a 命令1 获得ubuntu系统版本 12.04,14.04等命令2 获得系统位数x86_64,i386等根据自己的电脑系统选择正确的安装包，AMD64是指64位系统和AMD无关，I386是指32位系统和inter芯片无关.例如我的电脑是: Distributor ID: UbuntuDescription: Ubuntu 14.04.4 LTSRelease: 14.04Codename: trustyx86_64 GNU/Linux 那么我选择的是: Ubuntu 14.04 (“Trusty”) AMD64 安装双击安装包安装即可virtualbox虚拟机linux版本官网下载地址: https://www.virtualbox.org/wiki/Linux_Downloads 安装出错处理另外,若自己电脑已经安装了错误版本的virtaulbox的情况下，请先把原来的卸载掉,同时把错误版本依赖的包也删掉. apt-get remove virtualbox apt-get auto remove 添加用户组最后把用户添加到vboxusers组（这个组在安装时会自动创建）: sudo adduser zwts vboxusers 安装windowsXP下载镜像网上搜索下载Ghost XP纯净系统的镜像，需要带有windowsPE的，放在本地的某个目录内即可若没有合适的镜像点击 我的镜像 下载 新建虚拟机打开virtualbox，点击new新建，除了内存和硬盘需要自己按需修改之外，一路选择默认选项即可我的电脑配置4G内存/300G硬盘， 选择虚拟机内存2048M，硬盘20G新建好了之后我们需要把镜像文件以光盘的形式挂在刚刚新建的虚拟机上： settings =&gt; storage =&gt; add optical drive =&gt; choose disk选择刚刚下载好的镜像iso文件，完成后确定点击start启动虚拟机出现镜像文件的安装选项，选择进入windowsPE进入PE系统之后，自动分盘，自动GHOST安装，自动重启。（有可能这一步直接成功了） 虚拟机出错处理start时有可能虚拟机报错，请在网上搜索报错信息解决，这里我把我所遇到的报错信息和解决方案记录下来： VT-x is disabled in the BIOS for all CPU modes (VERR_VMX_MSR_ALL_VMX_DISABLED).Result Code:NS_ERROR_FAILURE (0x80004005)Component:ConsoleWrapInterface:IConsole {872da645-4a9b-1727-bee2-5585105b9eed} 解决方案： Windows XP环境，这个是由于32位Windows XP最大支持3.25G内存，将分配给此虚拟电脑的内存降低到3.25G以内即可 蓝屏出错处理 若安装GHOST系统重启之后进入了XP的load界面但是马上蓝屏报错，虚拟机使用GHOST安装，有可能会找不到设备驱动，导致蓝屏失败，需要修改注册表 解决方案: 不要选择自动重启或者重启后继续进入PE。 开始菜单 运行cmd 加载XP注册表到PE注册表： reg load hklm\\!system c:\\windows\\system32\\config\\system 再次打开cmd，输入regedit进入注册表编辑器 打开HKEY_LOCAL_MACHINE\\!system\\ControlSet001\\services\\processor 修改start值从1到4 打开HKEY_LOCAL_MACHINE\\!system\\ControlSet002\\services\\processor 修改start值从1到4 卸载注册表 reg unload hklm\\!system 重新启动电脑，之前蓝屏的部分就过了，安装程序自动检测到硬件设备安装驱动 安装virtualbox增强包下载 下载地址：https://www.virtualbox.org/wiki/Downloads 名称：VirtualBox 5.0.20 Oracle VM VirtualBox Extension Pack，版本请根据安装的virtualbox选择 安装 双击下载下来的.vbox-extpack安装，默认选项即可 挂载增强包镜像 settings =&gt; storage =&gt; add optical drive =&gt; choose disk 选择/usr/share/virtualbox（若这里没有，请自己找找）下的 VBoxGuestAdditions.iso 虚拟机中安装增强应用 重启虚拟机 打开我的电脑发现新的挂载的光盘G盘？ 双击安装，默认选项即可，完成后会自动重启 设置虚拟机和主机的共享目录 在安装了增强包之后，打开虚拟机的Settings=&gt;Shared Folders=&gt;添加按钮=&gt;选择目录 启动xp虚拟机 打开我的电脑 =&gt; 工具 =&gt; 映射网络驱动器 =&gt; 网上邻居 =&gt; VirtualBox Shared Folders =&gt; Vboxsvr 完成","tags":[]},{"title":"Hello World","date":"2017-04-28T10:04:35.000Z","path":"2017/04/28/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]